- name: Vérification de la présence d'une CA
  routeros_command:
    commands:
          - /certificate print count-only where name="{{ id_client }}_CA"
  register: certificates

- name: Génération et export du CA
  routeros_command:
    commands:
         - /certificate add name=ca-template common-name={{ ippubopenstack }} country={{ country }} state={{ state }} locality={{ locality }} days-valid={{ days_valid }} key-usage=key-cert-sign,crl-sign
         - /certificate sign ca-template ca-crl-host={{ ip_chr }} name="{{ id_client }}_CA"
         - /certificate set "{{ id_client }}_CA" trusted=yes
         - /certificate export-certificate "{{ id_client }}_CA"
  when: certificates is search("0")

- name: Vérification que la template CA n'est plus la
  routeros_command:
    commands:
          - /certificate print count-only where name="ca-template"
  register: certificates

- name: Arrêt du job si la template est toujours présente
  fail:
    msg: Template ca-template toujours présente sur le router, vérifier avec WinBox et supprimer TOUS les certificats sur le routeur.
  when: certificates is search("1")

- name: Création du certificat serveur
  community.routeros.command:
    commands:
          - /certificate add name="{{ id_client }}_server-template" common-name="{{ id_client }}_certificate" days-valid={{ days_valid }}

- name: Signature du certificat avec le CA
  community.routeros.command:
    commands:
          - /certificate sign "{{ id_client }}_server-template" ca="{{ id_client }}_CA" name="{{ id_client }}_certificate"

- name: Trusted du certificat
  community.routeros.command:
    commands:
          - /certificate set "{{ id_client }}_certificate" trusted=yes

- name: Vérification que le certificat est signé par la CA
  routeros_command:
    commands:
          - /certificate print count-only where ca="{{ id_client }}_CA"
  register: certificates

- name: Arrêt du job si le certificat n'est pas signé
  fail:
    msg: Certificat non signé par la CA, vérifier sur WinBox.
  when: certificates is search("0")

- name: Vérification qu'aucun pool openvpn est présent.
  routeros_command:
    commands:
          - /ip pool print count-only where name=openvpn
  register: pool

- name: Range openvpn
  community.routeros.command:
    commands:
          - /ip pool add name=openvpn ranges={{ subnet }}
  when: pool is search("0")

- name: Vérification du nombre d interfaces
  routeros_command:
    commands:
          - /interface print count-only
  register: interfaces

- name: Vérification que les règles de pare-feu ne sont pas deja faites.
  routeros_command:
    commands:
          - /ip firewall nat print count-only where src-address={{ subnet }} and action=masquerade
  register: fw_rules

- name: Règles de FW
  community.routeros.command:
    commands:
          - /ip firewall nat add action=masquerade chain=srcnat out-interface=ether2 src-address={{ subnet }}
          - /ip firewall nat add action=masquerade chain=srcnat out-interface=ether3 src-address={{ subnet }}
  when: fw_rules is search("0") and interfaces is search("3")

- name: Règles de FW
  community.routeros.command:
    commands:
          - /ip firewall nat add action=masquerade chain=srcnat out-interface=ether2 src-address={{ subnet }}
  when: fw_rules is search("0") and interfaces is search("2")

- name: Add openvpn interface and enabling server
  community.routeros.command:
    commands:
          - /ppp profile add local-address={{ vpn_gw }} name={{ interface_name }} remote-address={{ remote_address }} use-compression={{ use_compression }} use-encryption={{ use_encryption }} use-ipv6={{ use_ipv6 }} use-mpls={{ use_mpls }}
          - /interface ovpn-server server set auth=sha1 cipher=aes256 default-profile=openvpn require-client-certificate=yes enabled=yes certificate="{{ id_client }}_certificate"
